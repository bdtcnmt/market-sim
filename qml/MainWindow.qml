import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15

SplitView {
    id: theSplitView
    anchors.fill: parent
    orientation: Qt.Horizontal

    SidePanel {
        Layout.preferredWidth: theSplitView.width * 0.33
        Layout.minimumWidth: theSplitView.width * 0.33
    }

    // Right panel: main content area.
    ColumnLayout {
        Layout.fillWidth: true
        Layout.fillHeight: true

        TextField {
            id: searchField
            placeholderText: "Search stocks..."
            font.pixelSize: 16
            height: 30
            Layout.fillWidth: true
            onAccepted: {
                dataFetcher.searchStock(text)
                console.log("Searching for:", text)
            }
        }

        // Lightpink rectangle that shows both stock info and the graph.
        Rectangle {
            color: "lightpink"
            Layout.fillWidth: true
            Layout.fillHeight: true

            ColumnLayout {
                anchors.fill: parent
                spacing: 10

                // Text element for displaying stock summary information.
                Text {
                    id: stockSummary
                    text: "Stock information will appear here."
                    wrapMode: Text.Wrap
                    font.pixelSize: 16
                    Layout.fillWidth: true
                }

                // Image element for displaying the chart generated by Python.
                Image {
                    id: chartImage
                    source: ""
                    fillMode: Image.PreserveAspectFit
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                }
            }

            // Place Connections inside this Rectangle so it can see stockSummary and chartImage.
            Connections {
                target: dataFetcher
                onStockInfoReady: function(summary) {
                    stockSummary.text = summary;
                    // If needed, force the image to refresh by updating its source (e.g., adding a query parameter).
                    chartImage.source = "file:///" + workingDir + "/chart.png?" + Date.now();
                    console.log("Stock info updated:", summary);
                }
                onErrorOccurred: function(error) {
                    stockSummary.text = "Error: " + error;
                    console.log("Error occurred:", error);
                }
            }
        }
    }
}